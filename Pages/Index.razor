@page "/"
@using System.Threading
@using procrastinator.Models
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1>The Procrastinator</h1>

<h2>Procrastinations: @totalProcrastination</h2>
<p>You are making @speed procrastinations per second!</p>
<button class="btn btn-primary" @onclick="ManualIncrement">Manual rusty machine (+1)</button>

<ItemsStore OnTotalProcrastinationChanged="TotalProcrastinationChanged"
            OnItemsChanged="ItemsChanged"
            totalProcrastination="totalProcrastination">
</ItemsStore>

@code {
    private decimal totalProcrastination = 0;
    private int speed = 0;
    private ICollection<Item> items { get; set; } = new List<Item>();
    private static Timer _timer;
    private const long timerInterval = 200;

    protected override void OnInitialized()
    {
        _timer = new Timer(Callback, null, 0, timerInterval);
    }
 
    private void Callback(object state)
    {
        CalculateAndApplyProcrastinations();
    }

    private void CalculateAndApplyProcrastinations()
    {
        var totalProcToAdd = 0;
        foreach (var item in items)
        {
            totalProcToAdd += item.Power * item.Total;
        }
        speed = totalProcToAdd;

        float totalProcToAddOnStep = (totalProcToAdd/(1000.0f/timerInterval));

        totalProcrastination += decimal.Round((decimal)totalProcToAddOnStep, 2, MidpointRounding.AwayFromZero);

        this.StateHasChanged();
    }

    private void ManualIncrement()
    {
        totalProcrastination++;
        LocalStorage.SetItemAsync("quantity", totalProcrastination);
    }

    public void TotalProcrastinationChanged(decimal totalProc)
    {
        totalProcrastination = totalProc;
    }
    public void ItemsChanged(ICollection<Item> newItems)
    {
        items = newItems;
    }
}